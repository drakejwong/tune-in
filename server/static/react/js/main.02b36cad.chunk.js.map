{"version":3,"sources":["components/loginButton.js","constants.js","components/TopBar.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["LoginButton","props","state","msg","window","open","Button","className","color","this","React","Component","TopBar","Navbar","color-on-scroll","expand","NavbarBrand","href","onClick","e","preventDefault","id","style","margin","App","loggedIn","topTracks","token","topArtists","token2","user_id","setState","rank","map","track","name","artists","x","join","preview","preview_url","key","toUpperCase","getTops","renderTracksTableHeader","renderTracksTableData","artist","renderArtistsTableHeader","renderArtistsTableData","Container","Row","Col","lg","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"js/main.02b36cad.chunk.js","sourcesContent":["import React from 'react';\n\n// reactstrap components\nimport {\n    Button,\n} from \"reactstrap\";\n\nimport { AUTH_LINK } from '../constants';\n  \nclass LoginButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            msg: this.props.msg ? this.props.msg : \"Log In\"\n        }\n    }\n\n    doTheLogin() {\n        window.open(AUTH_LINK);\n    }\n\n    render() {\n        return (\n        <>\n            <Button className=\"btn-round ml-auto\" color=\"success\">\n                <i className=\"tim-icons icon-single-02\" /> {this.state.msg}\n            </Button>\n        </>\n        );\n    }\n}\n\nexport default LoginButton;","export const AUTH_LINK = \"http://localhost:8888\";","import React from 'react';\n\n// reactstrap components\nimport {\n    NavbarBrand,\n    Navbar,\n  } from \"reactstrap\";\n  \nimport LoginButton from './loginButton';\nimport '../styles/TopBar.css';\n  \n  class TopBar extends React.Component {\n    render() {\n      return (\n        <>\n          <Navbar color-on-scroll=\"100\" className=\"navbar-transparent tuneinnav sticky-top\" expand=\"lg\">\n            <NavbarBrand href=\"#\" onClick={e => e.preventDefault()}>\n                <h3 id=\"content\" style={{margin:0}}>TuneIn</h3>\n            </NavbarBrand>\n            <LoginButton />\n          </Navbar>\n        </>\n      );\n    }\n  }\n  \n  export default TopBar;","import React from 'react';\n\nimport {\n    Button,\n    Table\n  } from \"reactstrap\";\n\nclass Info extends React.Component {\n\n    render() {\n        return (\n        <>\n            <Table responsive>\n                <thead>\n                    <tr>\n                        <th className=\"text-center\">#</th>\n                        <th>Name</th>\n                        <th>Job Position</th>\n                        <th className=\"text-center\">Since</th>\n                        <th className=\"text-right\">Salary</th>\n                        <th className=\"text-right\">Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td className=\"text-center\">1</td>\n                        <td>Andrew Mike</td>\n                        <td>Develop</td>\n                        <td className=\"text-center\">2013</td>\n                        <td className=\"text-right\">€ 99,225</td>\n                        <td className=\"text-right\">\n                            <Button className=\"btn-icon\" color=\"info\" size=\"sm\">\n                                <i className=\"fa fa-user\"></i>\n                            </Button>{` `}\n                            <Button className=\"btn-icon\" color=\"success\" size=\"sm\">\n                                <i className=\"fa fa-edit\"></i>\n                            </Button>{` `}\n                            <Button className=\"btn-icon\" color=\"danger\" size=\"sm\">\n                                <i className=\"fa fa-times\" />\n                            </Button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"text-center\">2</td>\n                        <td>Manuel Rico</td>\n                        <td>Manager</td>\n                        <td className=\"text-center\">2012</td>\n                        <td className=\"text-right\">€ 99,201</td>\n                        <td className=\"text-right\">\n                            <Button className=\"btn-icon btn-round\" color=\"info\" size=\"sm\">\n                                <i className=\"fa fa-user\"></i>\n                            </Button>{` `}\n                            <Button className=\"btn-icon btn-round\" color=\"success\" size=\"sm\">\n                                <i className=\"fa fa-edit\"></i>\n                            </Button>{` `}\n                            <Button className=\"btn-icon btn-round\" color=\"danger\" size=\"sm\">\n                                <i className=\"fa fa-times\" />\n                            </Button>{` `}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"text-center\">3</td>\n                        <td>Alex Mike</td>\n                        <td>Designer</td>\n                        <td className=\"text-center\">2012</td>\n                        <td className=\"text-right\">€ 99,201</td>\n                        <td className=\"text-right\">\n                            <Button className=\"btn-icon btn-simple\" color=\"info\" size=\"sm\">\n                                <i className=\"fa fa-user\"></i>\n                            </Button>{` `}\n                            <Button className=\"btn-icon btn-simple\" color=\"success\" size=\"sm\">\n                                <i className=\"fa fa-edit\"></i>\n                            </Button>{` `}\n                            <Button className=\"btn-icon btn-simple\" color=\"danger\" size=\"sm\">\n                                <i className=\"fa fa-times\" />\n                            </Button>{` `}\n                        </td>\n                    </tr>\n                </tbody>\n            </Table>\n        </>\n        );\n    }\n}\n\nexport default Info;","import React, { Component } from 'react';\nimport './App.css';\nimport TopBar from './components/TopBar';\nimport LoginButton from './components/loginButton';\nimport Info from './components/Info';\n\nimport {\n  Row,\n  Col,\n  Container\n} from \"reactstrap\";\n\n// const spot = new SpotifyWebApi();\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    // const params = this.getHashParams();\n    // const token = params.access_token;\n    // if (token) {\n    //   spot.setAccessToken(token);\n    // }\n    this.state = {\n      loggedIn: true,\n      topTracks: window.token,\n      topArtists: window.token2,\n      user_id: \"\"\n    }\n  }\n/*\nTODO: validate login from flask token.\nfirst see if we can print the access token.\n  this would mean i can pass up from py auth module.\n  rn taking directly from url which is from the js auth's redirect.\nthen validate login on frontend and offer the table dom.\n*/\n  // getHashParams() {\n  //   var hashParams = {};\n  //   var e, r = /([^&;=]+)=?([^&;]*)/g,\n  //       q = window.location.hash.substring(1);\n  //   e = r.exec(q)\n  //   while (e) {\n  //      hashParams[e[1]] = decodeURIComponent(e[2]);\n  //      e = r.exec(q);\n  //   }\n  //   return hashParams;\n  // }\n\n  // getTops() {\n  //   spot.getMe()\n  //     .then((user) => {\n  //       this.setState({\n  //         user_id: user.id\n  //       });\n  //     })\n  //   spot.getMyTopTracks({\n  //     limit: 50,\n  //     time_range: \"short_term\"\n  //   })\n  //     .then((response) => {\n  //       this.setState({\n  //         topTracks: response.items\n  //       });\n  //     })\n  //   console.log(this.state)\n  //   spot.getMyTopArtists({\n  //     limit: 50,\n  //     time_range: \"short_term\"\n  //   })\n  //     .then((response) => {\n  //       this.setState({\n  //         topArtists: response.items\n  //       });\n  //     })\n  //   console.log(this.state)\n  // }\n\n  getTops() {\n    this.setState({\n      topTracks: window.token,\n      topArtists: window.token2\n    });\n  }\n\n  renderTracksTableData() {\n    var rank = 0;\n    return this.state.topTracks.map((track) => {\n       rank++;\n       const name = track.name;\n       const artists = track.artists.map((x) => x.name).join(\", \");\n       const preview = track.preview_url;\n       return (\n          <tr key={name}>\n             <td>{rank}</td>\n             <td>{name}</td>\n             <td>{artists}</td>\n             <td><a href={preview}> Click to listen </a></td>\n          </tr>\n       )\n    })\n  }\n//TODO: get album art\n  renderTableHeader() {\n    // let header = Object.keys(this.state.topTracks[0]);\n    let header = [\"Rank\", \"Name\", \"Artist(s)\", \"Preview\"];\n    return header.map((key) => {\n       return <th key={key}>{key.toUpperCase()}</th>\n    })\n  }\n\n  renderTrackTable() {\n    this.getTops();\n    return (\n      <div>\n         <h1 id='title'>Top Tracks</h1>\n         <table id='tracks'>\n            <tbody>\n               <tr> {this.renderTracksTableHeader()} </tr>\n               {this.renderTracksTableData()}\n            </tbody>\n         </table>\n      </div>\n   )\n  }\n\n  renderArtistsTableData() {\n    var rank = 0;\n    return this.state.topArtists.map((artist) => {\n       const name = artist.name;\n       rank++\n       return (\n          <tr key={name}>\n             <td>{rank}</td>\n             <td>{name}</td>\n          </tr>\n       )\n    })\n  }\n\n  renderArtistsTableHeader() {\n    let header = [\"Rank\", \"Name\"];\n    return header.map((key) => {\n       return <th key={key}>{key.toUpperCase()}</th>\n    })\n  }\n\n  renderArtistTable() {\n    // this.getTops();\n    return (\n      <div>\n         <h1 id='title'>Artists</h1>\n         <table id='tracks'>\n            <tbody>\n               <tr> {this.renderArtistsTableHeader()} </tr>\n               {this.renderArtistsTableData()}\n            </tbody>\n         </table>\n      </div>\n   )\n  }\n\n  render() {\n    return (\n      <div>\n        <TopBar />\n\n        <div className=\"App\">\n          <div>\n            { !this.state.loggedIn &&\n              <div>\n                <h1>Do you even know a brother?</h1>\n                <Container>\n                  <Row className=\"justify-content-md-center\">\n                    <Col lg=\"6\">\n                      <p>What the fuck did you just fucking say about me, you little bitch? I'll have you know I graduated top of my class in the Navy Seals, and I've been involved in numerous secret raids on Al-Quaeda, and I have over 300 confirmed kills. I am trained in gorilla warfare and I'm the top sniper in the entire US armed forces. You are nothing to me but just another target. I will wipe you the fuck out with precision the likes of which has never been seen before on this Earth, mark my fucking words. You think you can get away with saying that shit to me over the Internet? Think again, fucker. As we speak I am contacting my secret network of spies across the USA and your IP is being traced right now so you better prepare for the storm, maggot. The storm that wipes out the pathetic little thing you call your life. You're fucking dead, kid. I can be anywhere, anytime, and I can kill you in over seven hundred ways, and that's just with my bare hands. Not only am I extensively trained in unarmed combat, but I have access to the entire arsenal of the United States Marine Corps and I will use it to its full extent to wipe your miserable ass off the face of the continent, you little shit. If only you could have known what unholy retribution your little \"clever\" comment was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn't, you didn't, and now you're paying the price, you goddamn idiot. I will shit fury all over you and you will drown in it. You're fucking dead, kiddo.</p>\n                    </Col>\n                  </Row>\n                </Container>\n                <br />\n                <a href='http://localhost:5000' > <LoginButton msg=\"Log In To Spotify Now, CMON!!!!\"/> </a>\n              </div>\n            }\n          </div>\n          {/* <div>\n            { this.state.loggedIn &&\n              <Info></Info>\n            }\n          </div> */}\n          {/* <div>\n            { this.state.loggedIn &&\n              <div>\n                { this.renderTrackTable() }\n              </div>\n            }\n          </div> */}\n          <div>\n            { window.token }\n          </div>\n          <div>\n            { window.token2 }\n          </div>\n          {/* <div>\n            { this.state.loggedIn &&\n              <div>\n                { this.renderArtistTable() }\n              </div>\n            }\n          </div> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"blk-design-system-react/src/assets/scss/blk-design-system-react.scss\";\nimport \"blk-design-system-react/src/assets/css/nucleo-icons.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}